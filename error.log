pascal.y: warning: 1 shift/reduce conflict [-Wconflicts-sr]
pascal.y: warning: 48 reduce/reduce conflicts [-Wconflicts-rr]
In file included from pascal.y:6:
./ast/ast.h:166:13: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
        for(auto param : *parameters) {
            ^
./ast/ast.h:166:24: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
        for(auto param : *parameters) {
                       ^
./ast/ast.h:186:13: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *routineBody) {
            ^
./ast/ast.h:186:23: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *routineBody) {
                      ^
./ast/ast.h:209:17: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
            for(auto constdecl : *constPart) {
                ^
./ast/ast.h:209:32: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
            for(auto constdecl : *constPart) {
                               ^
./ast/ast.h:214:17: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
            for(auto typedecl : *typePart) {
                ^
./ast/ast.h:214:31: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
            for(auto typedecl : *typePart) {
                              ^
./ast/ast.h:219:17: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
            for(auto vardecl : *varPart) {
                ^
./ast/ast.h:219:30: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
            for(auto vardecl : *varPart) {
                             ^
./ast/ast.h:224:17: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
            for(auto routine : *routinePart) {
                ^
./ast/ast.h:224:30: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
            for(auto routine : *routinePart) {
                             ^
./ast/ast.h:254:6: warning: scoped enumerations are a C++11 extension [-Wc++11-extensions]
enum class TypeKind {
     ^
./ast/ast.h:280:19: warning: in-class initialization of non-static data member is a C++11 extension [-Wc++11-extensions]
    TypeKind type = TypeKind::ERRORtype;
                  ^
./ast/ast.h:280:21: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
    TypeKind type = TypeKind::ERRORtype;
                    ^
./ast/ast.h:289:16: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        type = TypeKind::INTtype;
               ^
./ast/ast.h:301:16: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        type = TypeKind::REALtype;
               ^
./ast/ast.h:313:16: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        type = TypeKind::CHARtype;
               ^
./ast/ast.h:325:16: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        type = TypeKind::STRINGtype;
               ^
./ast/ast.h:337:16: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        type = TypeKind::BOOLEANtype;
               ^
./ast/ast.h:350:16: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        type = TypeKind::INTtype;
               ^
./ast/ast.h:380:19: warning: in-class initialization of non-static data member is a C++11 extension [-Wc++11-extensions]
    TypeKind type = TypeKind::ERRORtype;
                  ^
./ast/ast.h:380:21: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
    TypeKind type = TypeKind::ERRORtype;
                    ^
./ast/ast.h:396:16: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        type = TypeKind:: ARRAYtype;
               ^
./ast/ast.h:414:16: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        type = TypeKind::RECORDtype;
               ^
./ast/ast.h:418:13: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
        for(auto field : *fieldList)
            ^
./ast/ast.h:418:24: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
        for(auto field : *fieldList)
                       ^
./ast/ast.h:430:28: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
    BooleanType() { type = TypeKind::BOOLEANtype; }
                           ^
./ast/ast.h:439:25: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
    CharType() { type = TypeKind::CHARtype; }
                        ^
./ast/ast.h:448:28: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
    IntegerType() { type = TypeKind::INTtype; }
                           ^
./ast/ast.h:457:25: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
    RealType() { type = TypeKind::REALtype; }
                        ^
./ast/ast.h:466:27: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
    StringType() { type = TypeKind::STRINGtype; }
                          ^
./ast/ast.h:480:16: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        type = ValOrName::name;
               ^
./ast/ast.h:483:16: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        type = ValOrName::val;
               ^
./ast/ast.h:488:20: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        if(type == ValOrName::name) {
                   ^
./ast/ast.h:491:27: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        } else if(type == ValOrName::val) {
                          ^
./ast/ast.h:505:25: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
    VoidType() { type = TypeKind::VOIDtype; }
                        ^
./ast/ast.h:517:16: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        type = TypeKind::USERDEFtype; 
               ^
./ast/ast.h:541:6: warning: scoped enumerations are a C++11 extension [-Wc++11-extensions]
enum class Direction {
     ^
./ast/ast.h:579:13: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *thenStmts) {
            ^
./ast/ast.h:579:23: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *thenStmts) {
                      ^
./ast/ast.h:583:17: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
            for(auto stmt : *elseStmts) {
                ^
./ast/ast.h:583:27: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
            for(auto stmt : *elseStmts) {
                          ^
./ast/ast.h:604:13: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *loopStmts) {
            ^
./ast/ast.h:604:23: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *loopStmts) {
                      ^
./ast/ast.h:623:13: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *loopStmts) {
            ^
./ast/ast.h:623:23: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *loopStmts) {
                      ^
./ast/ast.h:649:13: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *loopStmts) {
            ^
./ast/ast.h:649:23: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *loopStmts) {
                      ^
./ast/ast.h:668:13: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
        for(auto caseexpr : *caseList) {
            ^
./ast/ast.h:668:27: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
        for(auto caseexpr : *caseList) {
                          ^
./ast/ast.h:688:13: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *exeStmts) {
            ^
./ast/ast.h:688:23: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *exeStmts) {
                      ^
./ast/ast.h:708:6: warning: scoped enumerations are a C++11 extension [-Wc++11-extensions]
enum class SYSPROC {
     ^
./ast/ast.h:712:6: warning: scoped enumerations are a C++11 extension [-Wc++11-extensions]
enum class SYSFUNCT {
     ^
./ast/ast.h:735:13: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
        for(auto arg : *args) {
            ^
./ast/ast.h:735:22: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
        for(auto arg : *args) {
                     ^
./ast/ast.h:742:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        if(procName == SYSPROC::WRITE) cout << "WRITE" << endl;
                       ^
./ast/ast.h:743:29: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(procName == SYSPROC::WRITELN) cout << "WRITELN" << endl;
                            ^
./ast/ast.h:756:13: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
        for(auto arg : *args) {
            ^
./ast/ast.h:756:22: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
        for(auto arg : *args) {
                     ^
./ast/ast.h:763:25: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        if(functName == SYSFUNCT::ABS) cout << "ABS" << endl;
                        ^
./ast/ast.h:764:30: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(functName == SYSFUNCT::CHR) cout << "CHR" << endl;
                             ^
./ast/ast.h:765:30: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(functName == SYSFUNCT::ODD) cout << "ODD" << endl;
                             ^
./ast/ast.h:766:30: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(functName == SYSFUNCT::ORD) cout << "ORD" << endl;
                             ^
./ast/ast.h:767:30: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(functName == SYSFUNCT::PRED) cout << "PRED" << endl;
                             ^
./ast/ast.h:768:30: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(functName == SYSFUNCT::SQR) cout << "SQR" << endl;
                             ^
./ast/ast.h:769:30: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(functName == SYSFUNCT::SQRT) cout << "SQRT" << endl;
                             ^
./ast/ast.h:770:30: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(functName == SYSFUNCT::SUCC) cout << "SUCC" << endl;
                             ^
./ast/ast.h:788:17: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
            for(auto arg : *args) {
                ^
./ast/ast.h:788:26: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
            for(auto arg : *args) {
                         ^
./ast/ast.h:817:6: warning: scoped enumerations are a C++11 extension [-Wc++11-extensions]
enum class BinaryOperator {
     ^
./ast/ast.h:822:6: warning: scoped enumerations are a C++11 extension [-Wc++11-extensions]
enum class UnaryOperator {
     ^
./ast/ast.h:840:19: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        if(bOp == BinaryOperator::GEop) cout << ">=" << endl;
                  ^
./ast/ast.h:841:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::GTop) cout << ">" << endl;
                       ^
./ast/ast.h:842:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::LEop) cout << "<=" << endl;
                       ^
./ast/ast.h:843:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::LTop) cout << "<" << endl;
                       ^
./ast/ast.h:844:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::EQUALop) cout << "=" << endl;
                       ^
./ast/ast.h:845:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::UNEQUALop) cout << "!=" << endl;
                       ^
./ast/ast.h:846:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::PLUSop) cout << "+" << endl;
                       ^
./ast/ast.h:847:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::MINUSop) cout << "-" << endl;
                       ^
./ast/ast.h:848:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::MULop) cout << "*" << endl;
                       ^
./ast/ast.h:849:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::DIVop) cout << "/" << endl;
                       ^
./ast/ast.h:850:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::MODop) cout << "%" << endl;
                       ^
./ast/ast.h:851:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::ORop) cout << "OR" << endl;
                       ^
./ast/ast.h:852:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::ANDop) cout << "AND" << endl;
                       ^
./ast/ast.h:871:19: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        if(uOp == UnaryOperator::NEGop) cout << "-" << endl;
                  ^
./ast/ast.h:872:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(uOp == UnaryOperator::NOTop) cout << "NOT" << endl;
                       ^
pascal.y:196:55: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
                    if((yyvsp[0].astTypeKind) == ast::TypeKind::INTtype) {
                                                      ^
pascal.y:198:62: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
                    } else if((yyvsp[0].astTypeKind) == ast::TypeKind::REALtype) {
                                                             ^
pascal.y:200:62: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
                    } else if((yyvsp[0].astTypeKind) == ast::TypeKind::CHARtype) {
                                                             ^
pascal.y:202:62: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
                    } else if((yyvsp[0].astTypeKind) == ast::TypeKind::BOOLEANtype) {
                                                             ^
pascal.y:204:62: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
                    } else if((yyvsp[0].astTypeKind) == ast::TypeKind::STRINGtype) {
                                                             ^
pascal.y:218:87: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
                    (yyval.astBasicType) = new ast::RangeType(new ast::UnaryExpr(ast::UnaryOperator::NEGop, (yyvsp[-2].astBasicConst)), (yyvsp[0].astBasicConst)); 
                                                                                      ^
pascal.y:221:87: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
                    (yyval.astBasicType) = new ast::RangeType(new ast::UnaryExpr(ast::UnaryOperator::NEGop, (yyvsp[-3].astBasicConst)), new ast::UnaryExpr(ast::UnaryOperator::NEGop, (yyvsp[0].astBasicConst))); 
                                                                                      ^
pascal.y:221:161: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
                    (yyval.astBasicType) = new ast::RangeType(new ast::UnaryExpr(ast::UnaryOperator::NEGop, (yyvsp[-3].astBasicConst)), new ast::UnaryExpr(ast::UnaryOperator::NEGop, (yyvsp[0].astBasicConst))); 
                                                                                                                                                                ^
pascal.y:250:25: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
                    for(auto name: *((yyvsp[-3].astNameList))) 
                        ^
pascal.y:250:34: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
                    for(auto name: *((yyvsp[-3].astNameList))) 
                                 ^
pascal.y:278:25: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
                    for(auto name: *((yyvsp[-3].astNameList))) 
                        ^
pascal.y:278:34: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
                    for(auto name: *((yyvsp[-3].astNameList))) 
                                 ^
pascal.y:331:25: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
                    for(auto name: *((yyvsp[-2].astNameList))) 
                        ^
pascal.y:331:34: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
                    for(auto name: *((yyvsp[-2].astNameList))) 
                                 ^
pascal.y:336:25: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
                    for(auto name: *((yyvsp[-2].astNameList))) 
                        ^
pascal.y:336:34: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
                    for(auto name: *((yyvsp[-2].astNameList))) 
                                 ^
pascal.y:354:25: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
                    for(auto s : *((yyvsp[-1].astStmtList)))
                        ^
pascal.y:354:32: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
                    for(auto s : *((yyvsp[-1].astStmtList)))
                               ^
pascal.y:426:54: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
                    if((yyvsp[0].astSYSPROC) == ast::SYSPROC::WRITE)
                                                     ^
pascal.y:427:69: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
                        (yyval.astStmt) = new ast::SysProcCall(ast::SYSPROC::WRITE);
                                                                    ^
pascal.y:428:54: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
                    if((yyvsp[0].astSYSPROC) == ast::SYSPROC::WRITELN)
                                                     ^
pascal.y:429:69: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
                        (yyval.astStmt) = new ast::SysProcCall(ast::SYSPROC::WRITELN);
                                                                    ^
pascal.y:432:55: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
                    if((yyvsp[-3].astSYSPROC) == ast::SYSPROC::WRITE)
                                                      ^
pascal.y:433:69: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
                        (yyval.astStmt) = new ast::SysProcCall(ast::SYSPROC::WRITE, (yyvsp[-1].astExpressionList));
                                                                    ^
pascal.y:434:55: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
                    if((yyvsp[-3].astSYSPROC) == ast::SYSPROC::WRITELN)
                                                      ^
pascal.y:435:69: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
                        (yyval.astStmt) = new ast::SysProcCall(ast::SYSPROC::WRITELN, (yyvsp[-1].astExpressionList));
                                                                    ^
pascal.y:470:49: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
                    (yyval.astDirection) = ast::Direction::To;
                                                ^
pascal.y:473:49: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
                    (yyval.astDirection) = ast::Direction::DownTo;
                                                ^
pascal.y:515:97: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
                    (yyval.astExpression) = new ast::BinaryExpr((yyvsp[-2].astExpression), ast::BinaryOperator::GEop, (yyvsp[0].astExpression));
                                                                                                ^
pascal.y:518:97: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
                    (yyval.astExpression) = new ast::BinaryExpr((yyvsp[-2].astExpression), ast::BinaryOperator::GTop, (yyvsp[0].astExpression));
                                                                                                ^
pascal.y:521:97: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
                    (yyval.astExpression) = new ast::BinaryExpr((yyvsp[-2].astExpression), ast::BinaryOperator::LEop, (yyvsp[0].astExpression));
                                                                                                ^
pascal.y:524:97: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
                    (yyval.astExpression) = new ast::BinaryExpr((yyvsp[-2].astExpression), ast::BinaryOperator::LTop, (yyvsp[0].astExpression));
                                                                                                ^
pascal.y:527:97: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
                    (yyval.astExpression) = new ast::BinaryExpr((yyvsp[-2].astExpression), ast::BinaryOperator::EQUALop, (yyvsp[0].astExpression));
                                                                                                ^
pascal.y:530:97: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
                    (yyval.astExpression) = new ast::BinaryExpr((yyvsp[-2].astExpression), ast::BinaryOperator::UNEQUALop, (yyvsp[0].astExpression));
                                                                                                ^
pascal.y:537:97: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
                    (yyval.astExpression) = new ast::BinaryExpr((yyvsp[-2].astExpression), ast::BinaryOperator::PLUSop, (yyvsp[0].astExpression));
                                                                                                ^
pascal.y:540:97: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
                    (yyval.astExpression) = new ast::BinaryExpr((yyvsp[-2].astExpression), ast::BinaryOperator::MINUSop, (yyvsp[0].astExpression));
                                                                                                ^
pascal.y:543:97: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
                    (yyval.astExpression) = new ast::BinaryExpr((yyvsp[-2].astExpression), ast::BinaryOperator::ORop, (yyvsp[0].astExpression));
                                                                                                ^
pascal.y:551:97: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
                    (yyval.astExpression) = new ast::BinaryExpr((yyvsp[-2].astExpression), ast::BinaryOperator::MULop, (yyvsp[0].astExpression));
                                                                                                ^
pascal.y:554:97: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
                    (yyval.astExpression) = new ast::BinaryExpr((yyvsp[-2].astExpression), ast::BinaryOperator::DIVop, (yyvsp[0].astExpression));
                                                                                                ^
pascal.y:557:97: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
                    (yyval.astExpression) = new ast::BinaryExpr((yyvsp[-2].astExpression), ast::BinaryOperator::MODop, (yyvsp[0].astExpression));
                                                                                                ^
pascal.y:560:97: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
                    (yyval.astExpression) = new ast::BinaryExpr((yyvsp[-2].astExpression), ast::BinaryOperator::ANDop, (yyvsp[0].astExpression));
                                                                                                ^
pascal.y:586:69: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
                    (yyval.astExpression) = new ast::UnaryExpr(ast::UnaryOperator::NOTop, (yyvsp[0].astExpression));
                                                                    ^
pascal.y:589:69: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
                    (yyval.astExpression) = new ast::UnaryExpr(ast::UnaryOperator::NEGop, (yyvsp[0].astExpression));
                                                                    ^
131 warnings generated.
In file included from pascal.l:2:
./ast/ast.h:166:13: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
        for(auto param : *parameters) {
            ^
./ast/ast.h:166:24: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
        for(auto param : *parameters) {
                       ^
./ast/ast.h:186:13: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *routineBody) {
            ^
./ast/ast.h:186:23: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *routineBody) {
                      ^
./ast/ast.h:209:17: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
            for(auto constdecl : *constPart) {
                ^
./ast/ast.h:209:32: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
            for(auto constdecl : *constPart) {
                               ^
./ast/ast.h:214:17: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
            for(auto typedecl : *typePart) {
                ^
./ast/ast.h:214:31: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
            for(auto typedecl : *typePart) {
                              ^
./ast/ast.h:219:17: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
            for(auto vardecl : *varPart) {
                ^
./ast/ast.h:219:30: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
            for(auto vardecl : *varPart) {
                             ^
./ast/ast.h:224:17: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
            for(auto routine : *routinePart) {
                ^
./ast/ast.h:224:30: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
            for(auto routine : *routinePart) {
                             ^
./ast/ast.h:254:6: warning: scoped enumerations are a C++11 extension [-Wc++11-extensions]
enum class TypeKind {
     ^
./ast/ast.h:280:19: warning: in-class initialization of non-static data member is a C++11 extension [-Wc++11-extensions]
    TypeKind type = TypeKind::ERRORtype;
                  ^
./ast/ast.h:280:21: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
    TypeKind type = TypeKind::ERRORtype;
                    ^
./ast/ast.h:289:16: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        type = TypeKind::INTtype;
               ^
./ast/ast.h:301:16: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        type = TypeKind::REALtype;
               ^
./ast/ast.h:313:16: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        type = TypeKind::CHARtype;
               ^
./ast/ast.h:325:16: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        type = TypeKind::STRINGtype;
               ^
./ast/ast.h:337:16: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        type = TypeKind::BOOLEANtype;
               ^
./ast/ast.h:350:16: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        type = TypeKind::INTtype;
               ^
./ast/ast.h:380:19: warning: in-class initialization of non-static data member is a C++11 extension [-Wc++11-extensions]
    TypeKind type = TypeKind::ERRORtype;
                  ^
./ast/ast.h:380:21: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
    TypeKind type = TypeKind::ERRORtype;
                    ^
./ast/ast.h:396:16: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        type = TypeKind:: ARRAYtype;
               ^
./ast/ast.h:414:16: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        type = TypeKind::RECORDtype;
               ^
./ast/ast.h:418:13: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
        for(auto field : *fieldList)
            ^
./ast/ast.h:418:24: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
        for(auto field : *fieldList)
                       ^
./ast/ast.h:430:28: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
    BooleanType() { type = TypeKind::BOOLEANtype; }
                           ^
./ast/ast.h:439:25: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
    CharType() { type = TypeKind::CHARtype; }
                        ^
./ast/ast.h:448:28: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
    IntegerType() { type = TypeKind::INTtype; }
                           ^
./ast/ast.h:457:25: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
    RealType() { type = TypeKind::REALtype; }
                        ^
./ast/ast.h:466:27: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
    StringType() { type = TypeKind::STRINGtype; }
                          ^
./ast/ast.h:480:16: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        type = ValOrName::name;
               ^
./ast/ast.h:483:16: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        type = ValOrName::val;
               ^
./ast/ast.h:488:20: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        if(type == ValOrName::name) {
                   ^
./ast/ast.h:491:27: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        } else if(type == ValOrName::val) {
                          ^
./ast/ast.h:505:25: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
    VoidType() { type = TypeKind::VOIDtype; }
                        ^
./ast/ast.h:517:16: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        type = TypeKind::USERDEFtype; 
               ^
./ast/ast.h:541:6: warning: scoped enumerations are a C++11 extension [-Wc++11-extensions]
enum class Direction {
     ^
./ast/ast.h:579:13: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *thenStmts) {
            ^
./ast/ast.h:579:23: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *thenStmts) {
                      ^
./ast/ast.h:583:17: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
            for(auto stmt : *elseStmts) {
                ^
./ast/ast.h:583:27: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
            for(auto stmt : *elseStmts) {
                          ^
./ast/ast.h:604:13: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *loopStmts) {
            ^
./ast/ast.h:604:23: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *loopStmts) {
                      ^
./ast/ast.h:623:13: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *loopStmts) {
            ^
./ast/ast.h:623:23: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *loopStmts) {
                      ^
./ast/ast.h:649:13: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *loopStmts) {
            ^
./ast/ast.h:649:23: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *loopStmts) {
                      ^
./ast/ast.h:668:13: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
        for(auto caseexpr : *caseList) {
            ^
./ast/ast.h:668:27: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
        for(auto caseexpr : *caseList) {
                          ^
./ast/ast.h:688:13: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *exeStmts) {
            ^
./ast/ast.h:688:23: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *exeStmts) {
                      ^
./ast/ast.h:708:6: warning: scoped enumerations are a C++11 extension [-Wc++11-extensions]
enum class SYSPROC {
     ^
./ast/ast.h:712:6: warning: scoped enumerations are a C++11 extension [-Wc++11-extensions]
enum class SYSFUNCT {
     ^
./ast/ast.h:735:13: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
        for(auto arg : *args) {
            ^
./ast/ast.h:735:22: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
        for(auto arg : *args) {
                     ^
./ast/ast.h:742:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        if(procName == SYSPROC::WRITE) cout << "WRITE" << endl;
                       ^
./ast/ast.h:743:29: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(procName == SYSPROC::WRITELN) cout << "WRITELN" << endl;
                            ^
./ast/ast.h:756:13: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
        for(auto arg : *args) {
            ^
./ast/ast.h:756:22: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
        for(auto arg : *args) {
                     ^
./ast/ast.h:763:25: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        if(functName == SYSFUNCT::ABS) cout << "ABS" << endl;
                        ^
./ast/ast.h:764:30: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(functName == SYSFUNCT::CHR) cout << "CHR" << endl;
                             ^
./ast/ast.h:765:30: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(functName == SYSFUNCT::ODD) cout << "ODD" << endl;
                             ^
./ast/ast.h:766:30: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(functName == SYSFUNCT::ORD) cout << "ORD" << endl;
                             ^
./ast/ast.h:767:30: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(functName == SYSFUNCT::PRED) cout << "PRED" << endl;
                             ^
./ast/ast.h:768:30: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(functName == SYSFUNCT::SQR) cout << "SQR" << endl;
                             ^
./ast/ast.h:769:30: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(functName == SYSFUNCT::SQRT) cout << "SQRT" << endl;
                             ^
./ast/ast.h:770:30: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(functName == SYSFUNCT::SUCC) cout << "SUCC" << endl;
                             ^
./ast/ast.h:788:17: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
            for(auto arg : *args) {
                ^
./ast/ast.h:788:26: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
            for(auto arg : *args) {
                         ^
./ast/ast.h:817:6: warning: scoped enumerations are a C++11 extension [-Wc++11-extensions]
enum class BinaryOperator {
     ^
./ast/ast.h:822:6: warning: scoped enumerations are a C++11 extension [-Wc++11-extensions]
enum class UnaryOperator {
     ^
./ast/ast.h:840:19: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        if(bOp == BinaryOperator::GEop) cout << ">=" << endl;
                  ^
./ast/ast.h:841:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::GTop) cout << ">" << endl;
                       ^
./ast/ast.h:842:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::LEop) cout << "<=" << endl;
                       ^
./ast/ast.h:843:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::LTop) cout << "<" << endl;
                       ^
./ast/ast.h:844:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::EQUALop) cout << "=" << endl;
                       ^
./ast/ast.h:845:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::UNEQUALop) cout << "!=" << endl;
                       ^
./ast/ast.h:846:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::PLUSop) cout << "+" << endl;
                       ^
./ast/ast.h:847:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::MINUSop) cout << "-" << endl;
                       ^
./ast/ast.h:848:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::MULop) cout << "*" << endl;
                       ^
./ast/ast.h:849:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::DIVop) cout << "/" << endl;
                       ^
./ast/ast.h:850:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::MODop) cout << "%" << endl;
                       ^
./ast/ast.h:851:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::ORop) cout << "OR" << endl;
                       ^
./ast/ast.h:852:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::ANDop) cout << "AND" << endl;
                       ^
./ast/ast.h:871:19: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        if(uOp == UnaryOperator::NEGop) cout << "-" << endl;
                  ^
./ast/ast.h:872:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(uOp == UnaryOperator::NOTop) cout << "NOT" << endl;
                       ^
pascal.l:75:28: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
{yylval.astSYSFUNCT = ast::SYSFUNCT::ABS; return SYS_FUNCT;}
                           ^
pascal.l:76:28: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
{yylval.astSYSFUNCT = ast::SYSFUNCT::CHR; return SYS_FUNCT;}
                           ^
pascal.l:77:28: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
{yylval.astSYSFUNCT = ast::SYSFUNCT::ODD; return SYS_FUNCT;}
                           ^
pascal.l:78:28: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
{yylval.astSYSFUNCT = ast::SYSFUNCT::ORD; return SYS_FUNCT;}
                           ^
pascal.l:79:28: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
{yylval.astSYSFUNCT = ast::SYSFUNCT::PRED; return SYS_FUNCT;}
                           ^
pascal.l:80:28: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
{yylval.astSYSFUNCT = ast::SYSFUNCT::SQR; return SYS_FUNCT;}
                           ^
pascal.l:81:28: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
{yylval.astSYSFUNCT = ast::SYSFUNCT::SQRT; return SYS_FUNCT;}
                           ^
pascal.l:82:28: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
{yylval.astSYSFUNCT = ast::SYSFUNCT::SUCC; return SYS_FUNCT;}
                           ^
pascal.l:84:27: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
{yylval.astSYSPROC = ast::SYSPROC::WRITE; return SYS_PROC;}
                          ^
pascal.l:85:27: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
{yylval.astSYSPROC = ast::SYSPROC::WRITELN; return SYS_PROC;}
                          ^
pascal.l:86:28: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
{yylval.astTypeKind = ast::TypeKind::BOOLEANtype; return SYS_TYPE; }
                           ^
pascal.l:87:28: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
{yylval.astTypeKind = ast::TypeKind::CHARtype; return SYS_TYPE; }
                           ^
pascal.l:88:28: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
{yylval.astTypeKind = ast::TypeKind::INTtype; return SYS_TYPE; }
                           ^
pascal.l:89:28: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
{yylval.astTypeKind = ast::TypeKind::REALtype; return SYS_TYPE; }
                           ^
pascal.l:90:28: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
{yylval.astTypeKind = ast::TypeKind::STRINGtype; return SYS_TYPE; }
                           ^
103 warnings generated.
In file included from main.cpp:2:
./ast/ast.h:166:13: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
        for(auto param : *parameters) {
            ^
./ast/ast.h:166:24: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
        for(auto param : *parameters) {
                       ^
./ast/ast.h:186:13: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *routineBody) {
            ^
./ast/ast.h:186:23: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *routineBody) {
                      ^
./ast/ast.h:209:17: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
            for(auto constdecl : *constPart) {
                ^
./ast/ast.h:209:32: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
            for(auto constdecl : *constPart) {
                               ^
./ast/ast.h:214:17: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
            for(auto typedecl : *typePart) {
                ^
./ast/ast.h:214:31: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
            for(auto typedecl : *typePart) {
                              ^
./ast/ast.h:219:17: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
            for(auto vardecl : *varPart) {
                ^
./ast/ast.h:219:30: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
            for(auto vardecl : *varPart) {
                             ^
./ast/ast.h:224:17: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
            for(auto routine : *routinePart) {
                ^
./ast/ast.h:224:30: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
            for(auto routine : *routinePart) {
                             ^
./ast/ast.h:254:6: warning: scoped enumerations are a C++11 extension [-Wc++11-extensions]
enum class TypeKind {
     ^
./ast/ast.h:280:19: warning: in-class initialization of non-static data member is a C++11 extension [-Wc++11-extensions]
    TypeKind type = TypeKind::ERRORtype;
                  ^
./ast/ast.h:280:21: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
    TypeKind type = TypeKind::ERRORtype;
                    ^
./ast/ast.h:289:16: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        type = TypeKind::INTtype;
               ^
./ast/ast.h:301:16: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        type = TypeKind::REALtype;
               ^
./ast/ast.h:313:16: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        type = TypeKind::CHARtype;
               ^
./ast/ast.h:325:16: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        type = TypeKind::STRINGtype;
               ^
./ast/ast.h:337:16: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        type = TypeKind::BOOLEANtype;
               ^
./ast/ast.h:350:16: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        type = TypeKind::INTtype;
               ^
./ast/ast.h:380:19: warning: in-class initialization of non-static data member is a C++11 extension [-Wc++11-extensions]
    TypeKind type = TypeKind::ERRORtype;
                  ^
./ast/ast.h:380:21: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
    TypeKind type = TypeKind::ERRORtype;
                    ^
./ast/ast.h:396:16: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        type = TypeKind:: ARRAYtype;
               ^
./ast/ast.h:414:16: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        type = TypeKind::RECORDtype;
               ^
./ast/ast.h:418:13: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
        for(auto field : *fieldList)
            ^
./ast/ast.h:418:24: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
        for(auto field : *fieldList)
                       ^
./ast/ast.h:430:28: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
    BooleanType() { type = TypeKind::BOOLEANtype; }
                           ^
./ast/ast.h:439:25: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
    CharType() { type = TypeKind::CHARtype; }
                        ^
./ast/ast.h:448:28: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
    IntegerType() { type = TypeKind::INTtype; }
                           ^
./ast/ast.h:457:25: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
    RealType() { type = TypeKind::REALtype; }
                        ^
./ast/ast.h:466:27: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
    StringType() { type = TypeKind::STRINGtype; }
                          ^
./ast/ast.h:480:16: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        type = ValOrName::name;
               ^
./ast/ast.h:483:16: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        type = ValOrName::val;
               ^
./ast/ast.h:488:20: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        if(type == ValOrName::name) {
                   ^
./ast/ast.h:491:27: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        } else if(type == ValOrName::val) {
                          ^
./ast/ast.h:505:25: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
    VoidType() { type = TypeKind::VOIDtype; }
                        ^
./ast/ast.h:517:16: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        type = TypeKind::USERDEFtype; 
               ^
./ast/ast.h:541:6: warning: scoped enumerations are a C++11 extension [-Wc++11-extensions]
enum class Direction {
     ^
./ast/ast.h:579:13: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *thenStmts) {
            ^
./ast/ast.h:579:23: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *thenStmts) {
                      ^
./ast/ast.h:583:17: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
            for(auto stmt : *elseStmts) {
                ^
./ast/ast.h:583:27: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
            for(auto stmt : *elseStmts) {
                          ^
./ast/ast.h:604:13: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *loopStmts) {
            ^
./ast/ast.h:604:23: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *loopStmts) {
                      ^
./ast/ast.h:623:13: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *loopStmts) {
            ^
./ast/ast.h:623:23: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *loopStmts) {
                      ^
./ast/ast.h:649:13: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *loopStmts) {
            ^
./ast/ast.h:649:23: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *loopStmts) {
                      ^
./ast/ast.h:668:13: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
        for(auto caseexpr : *caseList) {
            ^
./ast/ast.h:668:27: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
        for(auto caseexpr : *caseList) {
                          ^
./ast/ast.h:688:13: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *exeStmts) {
            ^
./ast/ast.h:688:23: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *exeStmts) {
                      ^
./ast/ast.h:708:6: warning: scoped enumerations are a C++11 extension [-Wc++11-extensions]
enum class SYSPROC {
     ^
./ast/ast.h:712:6: warning: scoped enumerations are a C++11 extension [-Wc++11-extensions]
enum class SYSFUNCT {
     ^
./ast/ast.h:735:13: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
        for(auto arg : *args) {
            ^
./ast/ast.h:735:22: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
        for(auto arg : *args) {
                     ^
./ast/ast.h:742:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        if(procName == SYSPROC::WRITE) cout << "WRITE" << endl;
                       ^
./ast/ast.h:743:29: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(procName == SYSPROC::WRITELN) cout << "WRITELN" << endl;
                            ^
./ast/ast.h:756:13: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
        for(auto arg : *args) {
            ^
./ast/ast.h:756:22: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
        for(auto arg : *args) {
                     ^
./ast/ast.h:763:25: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        if(functName == SYSFUNCT::ABS) cout << "ABS" << endl;
                        ^
./ast/ast.h:764:30: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(functName == SYSFUNCT::CHR) cout << "CHR" << endl;
                             ^
./ast/ast.h:765:30: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(functName == SYSFUNCT::ODD) cout << "ODD" << endl;
                             ^
./ast/ast.h:766:30: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(functName == SYSFUNCT::ORD) cout << "ORD" << endl;
                             ^
./ast/ast.h:767:30: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(functName == SYSFUNCT::PRED) cout << "PRED" << endl;
                             ^
./ast/ast.h:768:30: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(functName == SYSFUNCT::SQR) cout << "SQR" << endl;
                             ^
./ast/ast.h:769:30: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(functName == SYSFUNCT::SQRT) cout << "SQRT" << endl;
                             ^
./ast/ast.h:770:30: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(functName == SYSFUNCT::SUCC) cout << "SUCC" << endl;
                             ^
./ast/ast.h:788:17: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
            for(auto arg : *args) {
                ^
./ast/ast.h:788:26: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
            for(auto arg : *args) {
                         ^
./ast/ast.h:817:6: warning: scoped enumerations are a C++11 extension [-Wc++11-extensions]
enum class BinaryOperator {
     ^
./ast/ast.h:822:6: warning: scoped enumerations are a C++11 extension [-Wc++11-extensions]
enum class UnaryOperator {
     ^
./ast/ast.h:840:19: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        if(bOp == BinaryOperator::GEop) cout << ">=" << endl;
                  ^
./ast/ast.h:841:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::GTop) cout << ">" << endl;
                       ^
./ast/ast.h:842:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::LEop) cout << "<=" << endl;
                       ^
./ast/ast.h:843:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::LTop) cout << "<" << endl;
                       ^
./ast/ast.h:844:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::EQUALop) cout << "=" << endl;
                       ^
./ast/ast.h:845:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::UNEQUALop) cout << "!=" << endl;
                       ^
./ast/ast.h:846:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::PLUSop) cout << "+" << endl;
                       ^
./ast/ast.h:847:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::MINUSop) cout << "-" << endl;
                       ^
./ast/ast.h:848:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::MULop) cout << "*" << endl;
                       ^
./ast/ast.h:849:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::DIVop) cout << "/" << endl;
                       ^
./ast/ast.h:850:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::MODop) cout << "%" << endl;
                       ^
./ast/ast.h:851:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::ORop) cout << "OR" << endl;
                       ^
./ast/ast.h:852:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::ANDop) cout << "AND" << endl;
                       ^
./ast/ast.h:871:19: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        if(uOp == UnaryOperator::NEGop) cout << "-" << endl;
                  ^
./ast/ast.h:872:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(uOp == UnaryOperator::NOTop) cout << "NOT" << endl;
                       ^
88 warnings generated.
In file included from ast/ast.cpp:1:
ast/ast.h:166:13: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
        for(auto param : *parameters) {
            ^
ast/ast.h:166:24: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
        for(auto param : *parameters) {
                       ^
ast/ast.h:186:13: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *routineBody) {
            ^
ast/ast.h:186:23: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *routineBody) {
                      ^
ast/ast.h:209:17: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
            for(auto constdecl : *constPart) {
                ^
ast/ast.h:209:32: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
            for(auto constdecl : *constPart) {
                               ^
ast/ast.h:214:17: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
            for(auto typedecl : *typePart) {
                ^
ast/ast.h:214:31: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
            for(auto typedecl : *typePart) {
                              ^
ast/ast.h:219:17: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
            for(auto vardecl : *varPart) {
                ^
ast/ast.h:219:30: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
            for(auto vardecl : *varPart) {
                             ^
ast/ast.h:224:17: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
            for(auto routine : *routinePart) {
                ^
ast/ast.h:224:30: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
            for(auto routine : *routinePart) {
                             ^
ast/ast.h:254:6: warning: scoped enumerations are a C++11 extension [-Wc++11-extensions]
enum class TypeKind {
     ^
ast/ast.h:280:19: warning: in-class initialization of non-static data member is a C++11 extension [-Wc++11-extensions]
    TypeKind type = TypeKind::ERRORtype;
                  ^
ast/ast.h:280:21: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
    TypeKind type = TypeKind::ERRORtype;
                    ^
ast/ast.h:289:16: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        type = TypeKind::INTtype;
               ^
ast/ast.h:301:16: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        type = TypeKind::REALtype;
               ^
ast/ast.h:313:16: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        type = TypeKind::CHARtype;
               ^
ast/ast.h:325:16: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        type = TypeKind::STRINGtype;
               ^
ast/ast.h:337:16: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        type = TypeKind::BOOLEANtype;
               ^
ast/ast.h:350:16: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        type = TypeKind::INTtype;
               ^
ast/ast.h:380:19: warning: in-class initialization of non-static data member is a C++11 extension [-Wc++11-extensions]
    TypeKind type = TypeKind::ERRORtype;
                  ^
ast/ast.h:380:21: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
    TypeKind type = TypeKind::ERRORtype;
                    ^
ast/ast.h:396:16: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        type = TypeKind:: ARRAYtype;
               ^
ast/ast.h:414:16: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        type = TypeKind::RECORDtype;
               ^
ast/ast.h:418:13: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
        for(auto field : *fieldList)
            ^
ast/ast.h:418:24: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
        for(auto field : *fieldList)
                       ^
ast/ast.h:430:28: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
    BooleanType() { type = TypeKind::BOOLEANtype; }
                           ^
ast/ast.h:439:25: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
    CharType() { type = TypeKind::CHARtype; }
                        ^
ast/ast.h:448:28: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
    IntegerType() { type = TypeKind::INTtype; }
                           ^
ast/ast.h:457:25: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
    RealType() { type = TypeKind::REALtype; }
                        ^
ast/ast.h:466:27: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
    StringType() { type = TypeKind::STRINGtype; }
                          ^
ast/ast.h:480:16: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        type = ValOrName::name;
               ^
ast/ast.h:483:16: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        type = ValOrName::val;
               ^
ast/ast.h:488:20: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        if(type == ValOrName::name) {
                   ^
ast/ast.h:491:27: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        } else if(type == ValOrName::val) {
                          ^
ast/ast.h:505:25: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
    VoidType() { type = TypeKind::VOIDtype; }
                        ^
ast/ast.h:517:16: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        type = TypeKind::USERDEFtype; 
               ^
ast/ast.h:541:6: warning: scoped enumerations are a C++11 extension [-Wc++11-extensions]
enum class Direction {
     ^
ast/ast.h:579:13: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *thenStmts) {
            ^
ast/ast.h:579:23: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *thenStmts) {
                      ^
ast/ast.h:583:17: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
            for(auto stmt : *elseStmts) {
                ^
ast/ast.h:583:27: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
            for(auto stmt : *elseStmts) {
                          ^
ast/ast.h:604:13: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *loopStmts) {
            ^
ast/ast.h:604:23: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *loopStmts) {
                      ^
ast/ast.h:623:13: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *loopStmts) {
            ^
ast/ast.h:623:23: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *loopStmts) {
                      ^
ast/ast.h:649:13: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *loopStmts) {
            ^
ast/ast.h:649:23: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *loopStmts) {
                      ^
ast/ast.h:668:13: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
        for(auto caseexpr : *caseList) {
            ^
ast/ast.h:668:27: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
        for(auto caseexpr : *caseList) {
                          ^
ast/ast.h:688:13: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *exeStmts) {
            ^
ast/ast.h:688:23: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
        for(auto stmt : *exeStmts) {
                      ^
ast/ast.h:708:6: warning: scoped enumerations are a C++11 extension [-Wc++11-extensions]
enum class SYSPROC {
     ^
ast/ast.h:712:6: warning: scoped enumerations are a C++11 extension [-Wc++11-extensions]
enum class SYSFUNCT {
     ^
ast/ast.h:735:13: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
        for(auto arg : *args) {
            ^
ast/ast.h:735:22: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
        for(auto arg : *args) {
                     ^
ast/ast.h:742:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        if(procName == SYSPROC::WRITE) cout << "WRITE" << endl;
                       ^
ast/ast.h:743:29: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(procName == SYSPROC::WRITELN) cout << "WRITELN" << endl;
                            ^
ast/ast.h:756:13: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
        for(auto arg : *args) {
            ^
ast/ast.h:756:22: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
        for(auto arg : *args) {
                     ^
ast/ast.h:763:25: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        if(functName == SYSFUNCT::ABS) cout << "ABS" << endl;
                        ^
ast/ast.h:764:30: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(functName == SYSFUNCT::CHR) cout << "CHR" << endl;
                             ^
ast/ast.h:765:30: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(functName == SYSFUNCT::ODD) cout << "ODD" << endl;
                             ^
ast/ast.h:766:30: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(functName == SYSFUNCT::ORD) cout << "ORD" << endl;
                             ^
ast/ast.h:767:30: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(functName == SYSFUNCT::PRED) cout << "PRED" << endl;
                             ^
ast/ast.h:768:30: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(functName == SYSFUNCT::SQR) cout << "SQR" << endl;
                             ^
ast/ast.h:769:30: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(functName == SYSFUNCT::SQRT) cout << "SQRT" << endl;
                             ^
ast/ast.h:770:30: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(functName == SYSFUNCT::SUCC) cout << "SUCC" << endl;
                             ^
ast/ast.h:788:17: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
            for(auto arg : *args) {
                ^
ast/ast.h:788:26: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
            for(auto arg : *args) {
                         ^
ast/ast.h:817:6: warning: scoped enumerations are a C++11 extension [-Wc++11-extensions]
enum class BinaryOperator {
     ^
ast/ast.h:822:6: warning: scoped enumerations are a C++11 extension [-Wc++11-extensions]
enum class UnaryOperator {
     ^
ast/ast.h:840:19: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        if(bOp == BinaryOperator::GEop) cout << ">=" << endl;
                  ^
ast/ast.h:841:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::GTop) cout << ">" << endl;
                       ^
ast/ast.h:842:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::LEop) cout << "<=" << endl;
                       ^
ast/ast.h:843:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::LTop) cout << "<" << endl;
                       ^
ast/ast.h:844:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::EQUALop) cout << "=" << endl;
                       ^
ast/ast.h:845:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::UNEQUALop) cout << "!=" << endl;
                       ^
ast/ast.h:846:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::PLUSop) cout << "+" << endl;
                       ^
ast/ast.h:847:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::MINUSop) cout << "-" << endl;
                       ^
ast/ast.h:848:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::MULop) cout << "*" << endl;
                       ^
ast/ast.h:849:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::DIVop) cout << "/" << endl;
                       ^
ast/ast.h:850:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::MODop) cout << "%" << endl;
                       ^
ast/ast.h:851:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::ORop) cout << "OR" << endl;
                       ^
ast/ast.h:852:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(bOp == BinaryOperator::ANDop) cout << "AND" << endl;
                       ^
ast/ast.h:871:19: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        if(uOp == UnaryOperator::NEGop) cout << "-" << endl;
                  ^
ast/ast.h:872:24: warning: use of enumeration in a nested name specifier is a C++11 extension [-Wc++11-extensions]
        else if(uOp == UnaryOperator::NOTop) cout << "NOT" << endl;
                       ^
ast/ast.cpp:16:13: warning: 'auto' type specifier is a C++11 extension [-Wc++11-extensions]
        for(auto child: *children) {
            ^
ast/ast.cpp:16:23: warning: range-based for loop is a C++11 extension [-Wc++11-extensions]
        for(auto child: *children) {
                      ^
90 warnings generated.
